require_relative './gitlab_client.rb'
require_relative './highline_cli.rb'

module GitHelper
  class GitLabMergeRequest

    #######################
    ### BASIC FUNCTIONS ###
    #######################

    def create
      begin
        # Ask these questions right away
        base_branch
        new_mr_title
        options = {
          source_branch: local_branch,
          target_branch: base_branch,
          description: new_mr_body
        }

        puts "Creating merge request: #{new_mr_title}"
        mr = gitlab_client.create_merge_request(local_project, new_mr_title, options)

        if mr.diff_refs.base_sha == mr.diff_refs.head_sha
          puts "Merge request was created, but no commits have been pushed to GitLab: #{mr.web_url}"
        else
          puts "Merge request successfully created: #{mr.web_url}"
        end
      rescue Gitlab::Error::Conflict => e
        puts 'Could not create merge request:'
        puts '  A merge request already exists for this branch'
      rescue Exception => e
        puts 'Could not create merge request:'
        puts e.message
      end
    end

    def merge
      begin
        # Ask these questions right away
        mr_id
        options = {}
        options[:should_remove_source_branch] = remove_source_branch?
        options[:squash] = squash_merge_request?
        options[:squash_commit_message] = existing_mr_title

        puts "Merging merge request: #{mr_id}"
        merge = gitlab_client.accept_merge_request(local_project, mr_id, options)
        puts "Merge request successfully merged: #{merge.merge_commit_sha}"
      rescue Gitlab::Error::MethodNotAllowed => e
        puts 'Could not merge merge request:'
        puts '  The merge request is not mergeable'
      rescue Gitlab::Error::NotFound => e
        puts 'Could not merge merge request:'
        puts "  Could not a locate a merge request to merge with ID #{mr_id}"
      rescue Exception => e
        puts 'Could not merge merge request:'
        puts e.message
      end
    end

    #################################
    ### ABOUT THE LOCAL CODE BASE ###
    #################################

    private def local_project
      @local_project ||= local_code.name
    end

    private def local_branch
      @local_branch ||= local_code.branch
    end

    private def autogenerated_title
      @autogenerated_title ||= local_code.generate_title
    end

    private def default_branch
      @default_branch ||= local_code.default_branch(local_repo, gitlab_client)
    end

    private def mr_template_options
      @mr_template_options ||= local_code.template_options({
                                 nested_directory_name: "merge_request_templates",
                                 non_nested_file_name: "merge_request_template"
                               })
    end

    #################################
    ### ASKING THE USER QUESTIONS ###
    #################################

    private def accept_autogenerated_title?
      if autogenerated_title
        answer = cli.ask("Accept the autogenerated merge request title '#{autogenerated_title}'? (y/n)")
        !!(answer =~ /^y/i)
      else
        false
      end
    end

    private def ask_title
      cli.ask('Title?')
    end

    private def base_branch_default?
      answer = cli.ask("Is '#{default_branch}' the correct base branch for your new merge request? (y/n)")
      !!(answer =~ /^y/i)
    end

    private def ask_base_branch
      cli.ask('Base branch?')
    end

    private def ask_merge_request_id
      cli.ask('Merge Request ID?')
    end

    private def squash_merge_request?
      answer = cli.ask('Squash merge request? (y/n)')
      !!(answer =~ /^y/i)
    end

    private def remove_source_branch?
      answer = cli.ask('Remove source branch after merging? (y/n)')
      !!(answer =~ /^y/i)
    end

    private def template_to_apply
      complete_options = mr_template_options << 'None'
      index = cli.ask_options("Which merge request template should be applied?", complete_options)
      complete_options[index]
    end

    private def apply_template?(template_file_name)
      answer = cli.ask("Apply the merge request template from #{template_file_name}? (y/n)")
      !!(answer =~ /^y/i)
    end

    ###################################
    ### INTERPRETING USER'S ANSWERS ###
    ###################################

    private def mr_id
      @mr_id ||= ask_merge_request_id
    end

    private def squash_merge_request
      @squash_merge_request ||= squash_merge_request?
    end

    private def remove_source_branch
      @remove_source_branch ||= remove_source_branch?
    end

    private def new_mr_title
      @new_mr_title ||= accept_autogenerated_title? ? autogenerated_title : ask_title
    end

    private def base_branch
      @base_branch ||= base_branch_default? ? default_branch : ask_base_branch
    end

    private def new_mr_body
      @new_mr_body ||= template_name_to_apply ? local_code.read_template(template_name_to_apply) : ''
    end

    private def template_name_to_apply
      return @template_name_to_apply if @template_name_to_apply
      @template_name_to_apply = nil

      unless mr_template_options.empty?
        if mr_template_options.count == 1
          @template_name_to_apply = mr_template_options.first if apply_template?(mr_template_options.first)
        else
          response = template_to_apply
          @template_name_to_apply = response unless response == "None"
        end
      end

      @template_name_to_apply
    end

    #############
    ### OTHER ###
    #############

    private def existing_mr_title
      @existing_mr_title ||= gitlab_client.merge_request(local_project, mr_id).title
    end

    private def gitlab_client
      @gitlab_client ||= GitHelper::GitLabClient.new.client
    end

    private def cli
      @cli ||= GitHelper::HighlineCli.new
    end

    private def local_code
      @local_code ||= GitHelper::LocalCode.new
    end
  end
end
